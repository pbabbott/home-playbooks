

- name: "Ensure {{ docker_daemon_directory }} directory exists"
  ansible.builtin.file:
    state: directory
    path: "{{ docker_daemon_directory }}"
    mode: '0755'

- name: Does "{{ docker_daemon_directory }}/daemon.json" file exist?
  stat:
    path: "{{ docker_daemon_directory }}/daemon.json"
  register:
    docker_daemon_stat_result

- name: Create "{{ docker_daemon_directory }}/daemon.json" file if not exists
  ansible.builtin.copy:
    dest: "{{ docker_daemon_directory }}/daemon.json"
    src: ./files/daemon.json
  when: not docker_daemon_stat_result.stat.exists

# ------------------------------------

- name: Load variables from file
  slurp:
    src: "{{ docker_daemon_directory }}/daemon.json"
  register: imported_var

# - name: Display decoded content
#   debug:
#     msg: "{{ imported_var.content | b64decode }}"

# - name: Display variables
#   debug:
#     msg: "{{ imported_var.content | b64decode | from_json }}"

- name: Append more key/values
  set_fact:
    imported_var: "{{ imported_var.content | b64decode | from_json | combine({docker_daemon_key: docker_daemon_value}) }}"

- name: Display updated variables
  debug:
    var: imported_var

- name: Update docker daemon.json
  ansible.builtin.copy:
    content: "{{ imported_var | to_nice_json }}"
    dest: "{{ docker_daemon_directory }}/daemon.json"
  notify:
    - Restart docker daemon
  register: docker_daemon

# ------------------------------------

# - name: Write hostname using jinja2
#   ansible.builtin.template:
#     src: daemon.j2
#     dest: /tmp/daemon.json

# - name: Replace existing docker daemon.json
#   ansible.builtin.copy:
#     remote_src: true
#     src: /tmp/daemon.json
#     dest: /etc/docker/daemon.json
#   register: docker_daemon

- name: Set docker daemon changed variable
  ansible.builtin.set_fact:
    docker_daemon_changed: "{{ docker_daemon.changed }}"
